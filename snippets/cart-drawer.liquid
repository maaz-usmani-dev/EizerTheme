<div id="cart-drawer">
  {% if cart.item_count > 0 %}
    <div class="fixed top-0 right-0 w-full max-w-md h-full bg-white shadow-xl z-50 flex flex-col">
      <div class="flex flex-col">
        <div x-on:click="cartDrawerOpen = false" class="text-right hover:shadow">
          {% render 'close-icon' %}
        </div>
        <div class="flex items-center justify-between p-4 border-b">
          <h1 class="text-xl font-semibold">Your Cart</h1>
          <a href="{{routes.all_products_collection_url}}" class="text-sm text-blue-600 underline hover:text-blue-800">
            Continue Shopping
          </a>
        </div>
      </div>

      <form action="{{routes.cart_url}}" method="post" novalidate class="flex-1 flex flex-col overflow-y-auto">
        <div class="divide-y Cart-Items">
          {% for item in cart.items %}
            <section class="flex gap-4 p-4 items-start cart-item" data-key="{{item.key}}">
              <a href="{{item.url}}">
                {% if item.image %}
                  <img
                    src="{{item.image | image_url: width: '100' }}"
                    alt="{{item.image.alt}}"
                    class="w-16 h-16 object-cover border"
                    width=""
                    height=""
                  >
                {% else %}
                  {{ 'product-1' | placeholder_svg_tag: 'w-16 h-16 object-cover border' }}
                {% endif %}
              </a>

              <div class="flex-1 text-sm">
                <a href="{{item.url}}" class="font-medium block">{{ item.product.title | truncatewords: 4 }}</a>
                <p class="text-gray-500">{{ item.variant.title }}</p>
                <p class="text-gray-800 mt-1">{{ item.price | money }}</p>
                <div class="flex items-center gap-2 mt-2">
                  <input
                    type="number"
                    name="updates[]"
                    value="{{item.quantity}}"
                    min="1"
                    id="updates_{{forloop.index}}"
                    data-key="{{ item.key }}"
                    data-price="{{ item.final_line_price | divided_by: item.quantity }}"
                    class="w-16 border px-2 py-1 text-center cart-qty text-sm"
                  >
                  <span class="Line-Total text-sm">{{ item.final_line_price | money }}</span>
                </div>
                <a
                  href="javascript:void(0)"
                  class="text-red-500 text-xs mt-1 inline-block Remove-Item"
                  data-key="{{item.key}}"
                >
                  Remove
                </a>
              </div>
            </section>
          {% endfor %}
        </div>

        <div class="p-4 border-t mt-auto">
          <div class="flex justify-between items-center text-lg font-semibold mb-4">
            <span>Total:</span>
            <span id="cart-total">{{ cart.total_price | money }}</span>
          </div>

          <div class="flex flex-col gap-2">
            <a
              href="{{routes.cart_url}}"
              name="update"
              class="w-full border border-lime-500 text-center text-lime-500 hover:bg-lime-500 hover:text-white text-sm py-2"
            >
              Go To Cart
            </a>
            <button type="submit" name="checkout" class="w-full bg-lime-500 text-white hover:bg-lime-600 text-sm py-2">
              Checkout
            </button>
          </div>
        </div>
      </form>
    </div>
  {% else %}
    <div
      class="fixed top-0 right-0 w-full max-w-md h-full bg-white shadow-xl z-50 flex flex-col justify-center items-center"
    >
      <div
        x-on:click="cartDrawerOpen = false"
        class="text-right absolute top-3 left-4 hover:shadow"
        @click.away="cartDrawerOpen=false"
      >
        {% render 'close-icon' %}
      </div>
      <div class="text-center px-4">
        <h1 class="text-xl font-semibold mb-4">Your Cart is Empty</h1>
        <a
          href="{{routes.all_products_collection_url}}"
          class="bg-lime-500 text-white px-6 py-2 rounded hover:bg-white hover:text-lime-500 border border-lime-500 text-sm"
        >
          Continue Shopping
        </a>
      </div>
    </div>
  {% endif %}
</div>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const cartTotal = document.getElementById('cart-total');
    const container = document.getElementById('cart-drawer');
    const cartCountEl = document.getElementById('cartCount');
    const emptyCartHtml = `
        <div
    class="fixed top-0 right-0 w-full max-w-md h-full bg-white shadow-xl z-50 flex flex-col justify-center items-center"
  >
  <div x-on:click="cartDrawerOpen = false" class="text-right absolute top-3 left-4 hover:shadow" @click.away="cartDrawerOpen=false">
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
  <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
</svg>
  </div>
    <div class="text-center px-4">
      <h1 class="text-xl font-semibold mb-4">Your Cart is Empty</h1>
      <a
        href="{{routes.all_products_collection_url}}"
        class="bg-lime-500 text-white px-6 py-2 rounded hover:bg-white hover:text-lime-500 border border-lime-500 text-sm"
      >
        Continue Shopping
      </a>
    </div>
  </div>`;

    function formatMoney(cents) {
      const amount = (cents / 100).toLocaleString('en-PK', {
        minimumFractionDigits: 2,
        maximumFractionDigits: 2,
      });
      return `Rs. ${amount}`;
    }

    // Quantity Update
    document.querySelectorAll('input[type="number"][data-key]').forEach((input) => {
      input.addEventListener('change', () => {
        const key = input.dataset.key;
        const quantity = parseInt(input.value);
        fetch('/cart/change.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id: key, quantity: quantity }),
        })
          .then((res) => res.json())
          .then((cart) => {
            const line = input.closest('section');
            const price = parseFloat(input.dataset.price);
            const lineTotalCell = line.querySelector('.Line-Total');
            lineTotalCell.textContent = formatMoney(price * quantity);
            cartTotal.textContent = formatMoney(cart.total_price);
            if (cartCountEl) cartCountEl.textContent = cart.item_count;
          });
      });
    });

    // Item Removal
    document.querySelectorAll('.Remove-Item').forEach((btn) => {
      btn.addEventListener('click', (e) => {
        e.preventDefault();
        const key = btn.dataset.key;
        fetch('/cart/change.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id: key, quantity: 0 }),
        })
          .then((res) => res.json())
          .then((cart) => {
            btn.closest('section').remove();
            if (cart.items.length === 0) {
              container.innerHTML = emptyCartHtml;
              if (cartCountEl) cartCountEl.textContent = '';
            } else {
              cartTotal.textContent = formatMoney(cart.total_price);
              if (cartCountEl) cartCountEl.textContent = cart.item_count;
            }
          });
      });
    });
  });
</script>
